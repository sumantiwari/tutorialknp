<?php

namespace Yoda\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository  implements UserProviderInterface{

    public function findOneByUsernameOrEmail($username) {
        return $this->createQueryBuilder('u')
                        ->andWhere('u.username = :username OR u.email = :email')
                        ->setParameter('username', $username)
                        ->setParameter('email', $username)
                        ->getQuery()
                        ->getOneOrNullResult()
        ;
    }

    public function loadUserByUsername($username): \Symfony\Component\Security\Core\User\UserInterface {
         $user = $this->findOneByUsernameOrEmail($username);

        if (!$user) {
            throw new UsernameNotFoundException('No user found for username '.$username);
        }

        return $user;
    }

    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user): \Symfony\Component\Security\Core\User\UserInterface {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf(
                'Instances of "%s" are not supported.',
                $class
            ));
        }

        if (!$refreshedUser = $this->find($user->getId())) {
            throw new UsernameNotFoundException(sprintf('User with id %s not found', json_encode($user->getId())));
        }

        return $refreshedUser;
    }

    public function supportsClass($class): bool {
         return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }

}
